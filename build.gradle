plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

subprojects {
    group = 'codelap.api.server'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'


        compileOnly 'org.projectlombok:lombok'

        runtimeOnly 'com.mysql:mysql-connector-j'

        annotationProcessor 'org.projectlombok:lombok'

        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"


        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":common") {
    bootJar {
        enabled = false
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

project(":api") {

    dependencies {
        implementation(project(":common"))
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.flywaydb:flyway-mysql'
        implementation 'org.springframework.boot:spring-boot-starter-security'

        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }

    jar {
        enabled = false
    }

    bootJar {
        enabled = true
        dependsOn asciidoctor
    }

    ext {
        snippetsDir = file(getBuildDir().name + '/generated-snippets')
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
    }

    asciidoctor {
        dependsOn test
        inputs.dir snippetsDir
    }
}

project(":integration") {
    dependencies {

    }

    bootJar {
        enabled = false
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}
